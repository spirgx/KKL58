'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.4016
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("KKL58DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class KKL58DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableKC_HOUR_TABLE As KC_HOUR_TABLEDataTable
    
    Private tableKC_TEMP_TABLE As KC_TEMP_TABLEDataTable
    
    Private tableKN_HOUR_TABLE As KN_HOUR_TABLEDataTable
    
    Private tableKN_TEMP_TABLE As KN_TEMP_TABLEDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KC_HOUR_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KC_HOUR_TABLEDataTable(ds.Tables("KC_HOUR_TABLE")))
            End If
            If (Not (ds.Tables("KC_TEMP_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KC_TEMP_TABLEDataTable(ds.Tables("KC_TEMP_TABLE")))
            End If
            If (Not (ds.Tables("KN_HOUR_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KN_HOUR_TABLEDataTable(ds.Tables("KN_HOUR_TABLE")))
            End If
            If (Not (ds.Tables("KN_TEMP_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KN_TEMP_TABLEDataTable(ds.Tables("KN_TEMP_TABLE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KC_HOUR_TABLE() As KC_HOUR_TABLEDataTable
        Get
            Return Me.tableKC_HOUR_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KC_TEMP_TABLE() As KC_TEMP_TABLEDataTable
        Get
            Return Me.tableKC_TEMP_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KN_HOUR_TABLE() As KN_HOUR_TABLEDataTable
        Get
            Return Me.tableKN_HOUR_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KN_TEMP_TABLE() As KN_TEMP_TABLEDataTable
        Get
            Return Me.tableKN_TEMP_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As KKL58DataSet = CType(MyBase.Clone,KKL58DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KC_HOUR_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KC_HOUR_TABLEDataTable(ds.Tables("KC_HOUR_TABLE")))
            End If
            If (Not (ds.Tables("KC_TEMP_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KC_TEMP_TABLEDataTable(ds.Tables("KC_TEMP_TABLE")))
            End If
            If (Not (ds.Tables("KN_HOUR_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KN_HOUR_TABLEDataTable(ds.Tables("KN_HOUR_TABLE")))
            End If
            If (Not (ds.Tables("KN_TEMP_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New KN_TEMP_TABLEDataTable(ds.Tables("KN_TEMP_TABLE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKC_HOUR_TABLE = CType(MyBase.Tables("KC_HOUR_TABLE"),KC_HOUR_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKC_HOUR_TABLE) Is Nothing) Then
                Me.tableKC_HOUR_TABLE.InitVars
            End If
        End If
        Me.tableKC_TEMP_TABLE = CType(MyBase.Tables("KC_TEMP_TABLE"),KC_TEMP_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKC_TEMP_TABLE) Is Nothing) Then
                Me.tableKC_TEMP_TABLE.InitVars
            End If
        End If
        Me.tableKN_HOUR_TABLE = CType(MyBase.Tables("KN_HOUR_TABLE"),KN_HOUR_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKN_HOUR_TABLE) Is Nothing) Then
                Me.tableKN_HOUR_TABLE.InitVars
            End If
        End If
        Me.tableKN_TEMP_TABLE = CType(MyBase.Tables("KN_TEMP_TABLE"),KN_TEMP_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKN_TEMP_TABLE) Is Nothing) Then
                Me.tableKN_TEMP_TABLE.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "KKL58DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KKL58DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKC_HOUR_TABLE = New KC_HOUR_TABLEDataTable
        MyBase.Tables.Add(Me.tableKC_HOUR_TABLE)
        Me.tableKC_TEMP_TABLE = New KC_TEMP_TABLEDataTable
        MyBase.Tables.Add(Me.tableKC_TEMP_TABLE)
        Me.tableKN_HOUR_TABLE = New KN_HOUR_TABLEDataTable
        MyBase.Tables.Add(Me.tableKN_HOUR_TABLE)
        Me.tableKN_TEMP_TABLE = New KN_TEMP_TABLEDataTable
        MyBase.Tables.Add(Me.tableKN_TEMP_TABLE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKC_HOUR_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKC_TEMP_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKN_HOUR_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKN_TEMP_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As KKL58DataSet = New KKL58DataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KC_HOUR_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As KC_HOUR_TABLERowChangeEvent)
    
    Public Delegate Sub KC_TEMP_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As KC_TEMP_TABLERowChangeEvent)
    
    Public Delegate Sub KN_HOUR_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As KN_HOUR_TABLERowChangeEvent)
    
    Public Delegate Sub KN_TEMP_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As KN_TEMP_TABLERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KC_HOUR_TABLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of KC_HOUR_TABLERow)
        
        Private columnTIMESTAMP As Global.System.Data.DataColumn
        
        Private columnIN_PH As Global.System.Data.DataColumn
        
        Private columnIN_EC As Global.System.Data.DataColumn
        
        Private columnIN_TEMP As Global.System.Data.DataColumn
        
        Private columnIN_SS As Global.System.Data.DataColumn
        
        Private columnIN_COD As Global.System.Data.DataColumn
        
        Private columnIN_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_PH As Global.System.Data.DataColumn
        
        Private columnOUT_EC As Global.System.Data.DataColumn
        
        Private columnOUT_TEMP As Global.System.Data.DataColumn
        
        Private columnOUT_SS As Global.System.Data.DataColumn
        
        Private columnOUT_COD As Global.System.Data.DataColumn
        
        Private columnOUT_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_O2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KC_HOUR_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_O2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_O2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KC_HOUR_TABLERow
            Get
                Return CType(Me.Rows(index),KC_HOUR_TABLERow)
            End Get
        End Property
        
        Public Event KC_HOUR_TABLERowChanging As KC_HOUR_TABLERowChangeEventHandler
        
        Public Event KC_HOUR_TABLERowChanged As KC_HOUR_TABLERowChangeEventHandler
        
        Public Event KC_HOUR_TABLERowDeleting As KC_HOUR_TABLERowChangeEventHandler
        
        Public Event KC_HOUR_TABLERowDeleted As KC_HOUR_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKC_HOUR_TABLERow(ByVal row As KC_HOUR_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKC_HOUR_TABLERow(ByVal TIMESTAMP As Date, ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As KC_HOUR_TABLERow
            Dim rowKC_HOUR_TABLERow As KC_HOUR_TABLERow = CType(Me.NewRow,KC_HOUR_TABLERow)
            Dim columnValuesArray() As Object = New Object() {TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2}
            rowKC_HOUR_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKC_HOUR_TABLERow)
            Return rowKC_HOUR_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTIMESTAMP(ByVal TIMESTAMP As Date) As KC_HOUR_TABLERow
            Return CType(Me.Rows.Find(New Object() {TIMESTAMP}),KC_HOUR_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KC_HOUR_TABLEDataTable = CType(MyBase.Clone,KC_HOUR_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KC_HOUR_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTIMESTAMP = MyBase.Columns("TIMESTAMP")
            Me.columnIN_PH = MyBase.Columns("IN_PH")
            Me.columnIN_EC = MyBase.Columns("IN_EC")
            Me.columnIN_TEMP = MyBase.Columns("IN_TEMP")
            Me.columnIN_SS = MyBase.Columns("IN_SS")
            Me.columnIN_COD = MyBase.Columns("IN_COD")
            Me.columnIN_AMDI = MyBase.Columns("IN_AMDI")
            Me.columnOUT_PH = MyBase.Columns("OUT_PH")
            Me.columnOUT_EC = MyBase.Columns("OUT_EC")
            Me.columnOUT_TEMP = MyBase.Columns("OUT_TEMP")
            Me.columnOUT_SS = MyBase.Columns("OUT_SS")
            Me.columnOUT_COD = MyBase.Columns("OUT_COD")
            Me.columnOUT_AMDI = MyBase.Columns("OUT_AMDI")
            Me.columnOUT_O2 = MyBase.Columns("OUT_O2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTIMESTAMP = New Global.System.Data.DataColumn("TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIMESTAMP)
            Me.columnIN_PH = New Global.System.Data.DataColumn("IN_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_PH)
            Me.columnIN_EC = New Global.System.Data.DataColumn("IN_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_EC)
            Me.columnIN_TEMP = New Global.System.Data.DataColumn("IN_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_TEMP)
            Me.columnIN_SS = New Global.System.Data.DataColumn("IN_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_SS)
            Me.columnIN_COD = New Global.System.Data.DataColumn("IN_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_COD)
            Me.columnIN_AMDI = New Global.System.Data.DataColumn("IN_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_AMDI)
            Me.columnOUT_PH = New Global.System.Data.DataColumn("OUT_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PH)
            Me.columnOUT_EC = New Global.System.Data.DataColumn("OUT_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_EC)
            Me.columnOUT_TEMP = New Global.System.Data.DataColumn("OUT_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_TEMP)
            Me.columnOUT_SS = New Global.System.Data.DataColumn("OUT_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_SS)
            Me.columnOUT_COD = New Global.System.Data.DataColumn("OUT_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_COD)
            Me.columnOUT_AMDI = New Global.System.Data.DataColumn("OUT_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_AMDI)
            Me.columnOUT_O2 = New Global.System.Data.DataColumn("OUT_O2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_O2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTIMESTAMP}, true))
            Me.columnTIMESTAMP.AllowDBNull = false
            Me.columnTIMESTAMP.Unique = true
            Me.columnIN_PH.AllowDBNull = false
            Me.columnIN_EC.AllowDBNull = false
            Me.columnIN_TEMP.AllowDBNull = false
            Me.columnIN_SS.AllowDBNull = false
            Me.columnIN_COD.AllowDBNull = false
            Me.columnIN_AMDI.AllowDBNull = false
            Me.columnOUT_PH.AllowDBNull = false
            Me.columnOUT_EC.AllowDBNull = false
            Me.columnOUT_TEMP.AllowDBNull = false
            Me.columnOUT_SS.AllowDBNull = false
            Me.columnOUT_COD.AllowDBNull = false
            Me.columnOUT_AMDI.AllowDBNull = false
            Me.columnOUT_O2.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKC_HOUR_TABLERow() As KC_HOUR_TABLERow
            Return CType(Me.NewRow,KC_HOUR_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KC_HOUR_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KC_HOUR_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KC_HOUR_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent KC_HOUR_TABLERowChanged(Me, New KC_HOUR_TABLERowChangeEvent(CType(e.Row,KC_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KC_HOUR_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent KC_HOUR_TABLERowChanging(Me, New KC_HOUR_TABLERowChangeEvent(CType(e.Row,KC_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KC_HOUR_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent KC_HOUR_TABLERowDeleted(Me, New KC_HOUR_TABLERowChangeEvent(CType(e.Row,KC_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KC_HOUR_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent KC_HOUR_TABLERowDeleting(Me, New KC_HOUR_TABLERowChangeEvent(CType(e.Row,KC_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKC_HOUR_TABLERow(ByVal row As KC_HOUR_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KKL58DataSet = New KKL58DataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KC_HOUR_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KC_TEMP_TABLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of KC_TEMP_TABLERow)
        
        Private columnIN_PH As Global.System.Data.DataColumn
        
        Private columnIN_EC As Global.System.Data.DataColumn
        
        Private columnIN_TEMP As Global.System.Data.DataColumn
        
        Private columnIN_SS As Global.System.Data.DataColumn
        
        Private columnIN_COD As Global.System.Data.DataColumn
        
        Private columnIN_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_PH As Global.System.Data.DataColumn
        
        Private columnOUT_EC As Global.System.Data.DataColumn
        
        Private columnOUT_TEMP As Global.System.Data.DataColumn
        
        Private columnOUT_SS As Global.System.Data.DataColumn
        
        Private columnOUT_COD As Global.System.Data.DataColumn
        
        Private columnOUT_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_O2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KC_TEMP_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_O2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_O2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KC_TEMP_TABLERow
            Get
                Return CType(Me.Rows(index),KC_TEMP_TABLERow)
            End Get
        End Property
        
        Public Event KC_TEMP_TABLERowChanging As KC_TEMP_TABLERowChangeEventHandler
        
        Public Event KC_TEMP_TABLERowChanged As KC_TEMP_TABLERowChangeEventHandler
        
        Public Event KC_TEMP_TABLERowDeleting As KC_TEMP_TABLERowChangeEventHandler
        
        Public Event KC_TEMP_TABLERowDeleted As KC_TEMP_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKC_TEMP_TABLERow(ByVal row As KC_TEMP_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKC_TEMP_TABLERow(ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As KC_TEMP_TABLERow
            Dim rowKC_TEMP_TABLERow As KC_TEMP_TABLERow = CType(Me.NewRow,KC_TEMP_TABLERow)
            Dim columnValuesArray() As Object = New Object() {IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2}
            rowKC_TEMP_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKC_TEMP_TABLERow)
            Return rowKC_TEMP_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KC_TEMP_TABLEDataTable = CType(MyBase.Clone,KC_TEMP_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KC_TEMP_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIN_PH = MyBase.Columns("IN_PH")
            Me.columnIN_EC = MyBase.Columns("IN_EC")
            Me.columnIN_TEMP = MyBase.Columns("IN_TEMP")
            Me.columnIN_SS = MyBase.Columns("IN_SS")
            Me.columnIN_COD = MyBase.Columns("IN_COD")
            Me.columnIN_AMDI = MyBase.Columns("IN_AMDI")
            Me.columnOUT_PH = MyBase.Columns("OUT_PH")
            Me.columnOUT_EC = MyBase.Columns("OUT_EC")
            Me.columnOUT_TEMP = MyBase.Columns("OUT_TEMP")
            Me.columnOUT_SS = MyBase.Columns("OUT_SS")
            Me.columnOUT_COD = MyBase.Columns("OUT_COD")
            Me.columnOUT_AMDI = MyBase.Columns("OUT_AMDI")
            Me.columnOUT_O2 = MyBase.Columns("OUT_O2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIN_PH = New Global.System.Data.DataColumn("IN_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_PH)
            Me.columnIN_EC = New Global.System.Data.DataColumn("IN_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_EC)
            Me.columnIN_TEMP = New Global.System.Data.DataColumn("IN_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_TEMP)
            Me.columnIN_SS = New Global.System.Data.DataColumn("IN_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_SS)
            Me.columnIN_COD = New Global.System.Data.DataColumn("IN_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_COD)
            Me.columnIN_AMDI = New Global.System.Data.DataColumn("IN_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_AMDI)
            Me.columnOUT_PH = New Global.System.Data.DataColumn("OUT_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PH)
            Me.columnOUT_EC = New Global.System.Data.DataColumn("OUT_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_EC)
            Me.columnOUT_TEMP = New Global.System.Data.DataColumn("OUT_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_TEMP)
            Me.columnOUT_SS = New Global.System.Data.DataColumn("OUT_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_SS)
            Me.columnOUT_COD = New Global.System.Data.DataColumn("OUT_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_COD)
            Me.columnOUT_AMDI = New Global.System.Data.DataColumn("OUT_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_AMDI)
            Me.columnOUT_O2 = New Global.System.Data.DataColumn("OUT_O2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_O2)
            Me.columnIN_PH.AllowDBNull = false
            Me.columnIN_EC.AllowDBNull = false
            Me.columnIN_TEMP.AllowDBNull = false
            Me.columnIN_SS.AllowDBNull = false
            Me.columnIN_COD.AllowDBNull = false
            Me.columnIN_AMDI.AllowDBNull = false
            Me.columnOUT_PH.AllowDBNull = false
            Me.columnOUT_EC.AllowDBNull = false
            Me.columnOUT_TEMP.AllowDBNull = false
            Me.columnOUT_SS.AllowDBNull = false
            Me.columnOUT_COD.AllowDBNull = false
            Me.columnOUT_AMDI.AllowDBNull = false
            Me.columnOUT_O2.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKC_TEMP_TABLERow() As KC_TEMP_TABLERow
            Return CType(Me.NewRow,KC_TEMP_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KC_TEMP_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KC_TEMP_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KC_TEMP_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent KC_TEMP_TABLERowChanged(Me, New KC_TEMP_TABLERowChangeEvent(CType(e.Row,KC_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KC_TEMP_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent KC_TEMP_TABLERowChanging(Me, New KC_TEMP_TABLERowChangeEvent(CType(e.Row,KC_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KC_TEMP_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent KC_TEMP_TABLERowDeleted(Me, New KC_TEMP_TABLERowChangeEvent(CType(e.Row,KC_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KC_TEMP_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent KC_TEMP_TABLERowDeleting(Me, New KC_TEMP_TABLERowChangeEvent(CType(e.Row,KC_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKC_TEMP_TABLERow(ByVal row As KC_TEMP_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KKL58DataSet = New KKL58DataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KC_TEMP_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KN_HOUR_TABLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of KN_HOUR_TABLERow)
        
        Private columnTIMESTAMP As Global.System.Data.DataColumn
        
        Private columnIN_PH As Global.System.Data.DataColumn
        
        Private columnIN_EC As Global.System.Data.DataColumn
        
        Private columnIN_TEMP As Global.System.Data.DataColumn
        
        Private columnIN_SS As Global.System.Data.DataColumn
        
        Private columnIN_COD As Global.System.Data.DataColumn
        
        Private columnIN_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_PH As Global.System.Data.DataColumn
        
        Private columnOUT_EC As Global.System.Data.DataColumn
        
        Private columnOUT_TEMP As Global.System.Data.DataColumn
        
        Private columnOUT_SS As Global.System.Data.DataColumn
        
        Private columnOUT_COD As Global.System.Data.DataColumn
        
        Private columnOUT_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_O2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KN_HOUR_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_O2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_O2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KN_HOUR_TABLERow
            Get
                Return CType(Me.Rows(index),KN_HOUR_TABLERow)
            End Get
        End Property
        
        Public Event KN_HOUR_TABLERowChanging As KN_HOUR_TABLERowChangeEventHandler
        
        Public Event KN_HOUR_TABLERowChanged As KN_HOUR_TABLERowChangeEventHandler
        
        Public Event KN_HOUR_TABLERowDeleting As KN_HOUR_TABLERowChangeEventHandler
        
        Public Event KN_HOUR_TABLERowDeleted As KN_HOUR_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKN_HOUR_TABLERow(ByVal row As KN_HOUR_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKN_HOUR_TABLERow(ByVal TIMESTAMP As Date, ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As KN_HOUR_TABLERow
            Dim rowKN_HOUR_TABLERow As KN_HOUR_TABLERow = CType(Me.NewRow,KN_HOUR_TABLERow)
            Dim columnValuesArray() As Object = New Object() {TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2}
            rowKN_HOUR_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKN_HOUR_TABLERow)
            Return rowKN_HOUR_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KN_HOUR_TABLEDataTable = CType(MyBase.Clone,KN_HOUR_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KN_HOUR_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTIMESTAMP = MyBase.Columns("TIMESTAMP")
            Me.columnIN_PH = MyBase.Columns("IN_PH")
            Me.columnIN_EC = MyBase.Columns("IN_EC")
            Me.columnIN_TEMP = MyBase.Columns("IN_TEMP")
            Me.columnIN_SS = MyBase.Columns("IN_SS")
            Me.columnIN_COD = MyBase.Columns("IN_COD")
            Me.columnIN_AMDI = MyBase.Columns("IN_AMDI")
            Me.columnOUT_PH = MyBase.Columns("OUT_PH")
            Me.columnOUT_EC = MyBase.Columns("OUT_EC")
            Me.columnOUT_TEMP = MyBase.Columns("OUT_TEMP")
            Me.columnOUT_SS = MyBase.Columns("OUT_SS")
            Me.columnOUT_COD = MyBase.Columns("OUT_COD")
            Me.columnOUT_AMDI = MyBase.Columns("OUT_AMDI")
            Me.columnOUT_O2 = MyBase.Columns("OUT_O2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTIMESTAMP = New Global.System.Data.DataColumn("TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIMESTAMP)
            Me.columnIN_PH = New Global.System.Data.DataColumn("IN_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_PH)
            Me.columnIN_EC = New Global.System.Data.DataColumn("IN_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_EC)
            Me.columnIN_TEMP = New Global.System.Data.DataColumn("IN_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_TEMP)
            Me.columnIN_SS = New Global.System.Data.DataColumn("IN_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_SS)
            Me.columnIN_COD = New Global.System.Data.DataColumn("IN_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_COD)
            Me.columnIN_AMDI = New Global.System.Data.DataColumn("IN_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_AMDI)
            Me.columnOUT_PH = New Global.System.Data.DataColumn("OUT_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PH)
            Me.columnOUT_EC = New Global.System.Data.DataColumn("OUT_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_EC)
            Me.columnOUT_TEMP = New Global.System.Data.DataColumn("OUT_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_TEMP)
            Me.columnOUT_SS = New Global.System.Data.DataColumn("OUT_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_SS)
            Me.columnOUT_COD = New Global.System.Data.DataColumn("OUT_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_COD)
            Me.columnOUT_AMDI = New Global.System.Data.DataColumn("OUT_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_AMDI)
            Me.columnOUT_O2 = New Global.System.Data.DataColumn("OUT_O2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_O2)
            Me.columnTIMESTAMP.AllowDBNull = false
            Me.columnIN_PH.AllowDBNull = false
            Me.columnIN_EC.AllowDBNull = false
            Me.columnIN_TEMP.AllowDBNull = false
            Me.columnIN_SS.AllowDBNull = false
            Me.columnIN_COD.AllowDBNull = false
            Me.columnIN_AMDI.AllowDBNull = false
            Me.columnOUT_PH.AllowDBNull = false
            Me.columnOUT_EC.AllowDBNull = false
            Me.columnOUT_TEMP.AllowDBNull = false
            Me.columnOUT_SS.AllowDBNull = false
            Me.columnOUT_COD.AllowDBNull = false
            Me.columnOUT_AMDI.AllowDBNull = false
            Me.columnOUT_O2.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKN_HOUR_TABLERow() As KN_HOUR_TABLERow
            Return CType(Me.NewRow,KN_HOUR_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KN_HOUR_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KN_HOUR_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KN_HOUR_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent KN_HOUR_TABLERowChanged(Me, New KN_HOUR_TABLERowChangeEvent(CType(e.Row,KN_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KN_HOUR_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent KN_HOUR_TABLERowChanging(Me, New KN_HOUR_TABLERowChangeEvent(CType(e.Row,KN_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KN_HOUR_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent KN_HOUR_TABLERowDeleted(Me, New KN_HOUR_TABLERowChangeEvent(CType(e.Row,KN_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KN_HOUR_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent KN_HOUR_TABLERowDeleting(Me, New KN_HOUR_TABLERowChangeEvent(CType(e.Row,KN_HOUR_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKN_HOUR_TABLERow(ByVal row As KN_HOUR_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KKL58DataSet = New KKL58DataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KN_HOUR_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KN_TEMP_TABLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of KN_TEMP_TABLERow)
        
        Private columnIN_PH As Global.System.Data.DataColumn
        
        Private columnIN_EC As Global.System.Data.DataColumn
        
        Private columnIN_TEMP As Global.System.Data.DataColumn
        
        Private columnIN_SS As Global.System.Data.DataColumn
        
        Private columnIN_COD As Global.System.Data.DataColumn
        
        Private columnIN_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_PH As Global.System.Data.DataColumn
        
        Private columnOUT_EC As Global.System.Data.DataColumn
        
        Private columnOUT_TEMP As Global.System.Data.DataColumn
        
        Private columnOUT_SS As Global.System.Data.DataColumn
        
        Private columnOUT_COD As Global.System.Data.DataColumn
        
        Private columnOUT_AMDI As Global.System.Data.DataColumn
        
        Private columnOUT_O2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KN_TEMP_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_ECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_EC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_SSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_SS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_AMDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_AMDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_O2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_O2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KN_TEMP_TABLERow
            Get
                Return CType(Me.Rows(index),KN_TEMP_TABLERow)
            End Get
        End Property
        
        Public Event KN_TEMP_TABLERowChanging As KN_TEMP_TABLERowChangeEventHandler
        
        Public Event KN_TEMP_TABLERowChanged As KN_TEMP_TABLERowChangeEventHandler
        
        Public Event KN_TEMP_TABLERowDeleting As KN_TEMP_TABLERowChangeEventHandler
        
        Public Event KN_TEMP_TABLERowDeleted As KN_TEMP_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKN_TEMP_TABLERow(ByVal row As KN_TEMP_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKN_TEMP_TABLERow(ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As KN_TEMP_TABLERow
            Dim rowKN_TEMP_TABLERow As KN_TEMP_TABLERow = CType(Me.NewRow,KN_TEMP_TABLERow)
            Dim columnValuesArray() As Object = New Object() {IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2}
            rowKN_TEMP_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKN_TEMP_TABLERow)
            Return rowKN_TEMP_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KN_TEMP_TABLEDataTable = CType(MyBase.Clone,KN_TEMP_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KN_TEMP_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIN_PH = MyBase.Columns("IN_PH")
            Me.columnIN_EC = MyBase.Columns("IN_EC")
            Me.columnIN_TEMP = MyBase.Columns("IN_TEMP")
            Me.columnIN_SS = MyBase.Columns("IN_SS")
            Me.columnIN_COD = MyBase.Columns("IN_COD")
            Me.columnIN_AMDI = MyBase.Columns("IN_AMDI")
            Me.columnOUT_PH = MyBase.Columns("OUT_PH")
            Me.columnOUT_EC = MyBase.Columns("OUT_EC")
            Me.columnOUT_TEMP = MyBase.Columns("OUT_TEMP")
            Me.columnOUT_SS = MyBase.Columns("OUT_SS")
            Me.columnOUT_COD = MyBase.Columns("OUT_COD")
            Me.columnOUT_AMDI = MyBase.Columns("OUT_AMDI")
            Me.columnOUT_O2 = MyBase.Columns("OUT_O2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIN_PH = New Global.System.Data.DataColumn("IN_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_PH)
            Me.columnIN_EC = New Global.System.Data.DataColumn("IN_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_EC)
            Me.columnIN_TEMP = New Global.System.Data.DataColumn("IN_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_TEMP)
            Me.columnIN_SS = New Global.System.Data.DataColumn("IN_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_SS)
            Me.columnIN_COD = New Global.System.Data.DataColumn("IN_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_COD)
            Me.columnIN_AMDI = New Global.System.Data.DataColumn("IN_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_AMDI)
            Me.columnOUT_PH = New Global.System.Data.DataColumn("OUT_PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PH)
            Me.columnOUT_EC = New Global.System.Data.DataColumn("OUT_EC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_EC)
            Me.columnOUT_TEMP = New Global.System.Data.DataColumn("OUT_TEMP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_TEMP)
            Me.columnOUT_SS = New Global.System.Data.DataColumn("OUT_SS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_SS)
            Me.columnOUT_COD = New Global.System.Data.DataColumn("OUT_COD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_COD)
            Me.columnOUT_AMDI = New Global.System.Data.DataColumn("OUT_AMDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_AMDI)
            Me.columnOUT_O2 = New Global.System.Data.DataColumn("OUT_O2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_O2)
            Me.columnIN_PH.AllowDBNull = false
            Me.columnIN_EC.AllowDBNull = false
            Me.columnIN_TEMP.AllowDBNull = false
            Me.columnIN_SS.AllowDBNull = false
            Me.columnIN_COD.AllowDBNull = false
            Me.columnIN_AMDI.AllowDBNull = false
            Me.columnOUT_PH.AllowDBNull = false
            Me.columnOUT_EC.AllowDBNull = false
            Me.columnOUT_TEMP.AllowDBNull = false
            Me.columnOUT_SS.AllowDBNull = false
            Me.columnOUT_COD.AllowDBNull = false
            Me.columnOUT_AMDI.AllowDBNull = false
            Me.columnOUT_O2.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKN_TEMP_TABLERow() As KN_TEMP_TABLERow
            Return CType(Me.NewRow,KN_TEMP_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KN_TEMP_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KN_TEMP_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KN_TEMP_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent KN_TEMP_TABLERowChanged(Me, New KN_TEMP_TABLERowChangeEvent(CType(e.Row,KN_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KN_TEMP_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent KN_TEMP_TABLERowChanging(Me, New KN_TEMP_TABLERowChangeEvent(CType(e.Row,KN_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KN_TEMP_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent KN_TEMP_TABLERowDeleted(Me, New KN_TEMP_TABLERowChangeEvent(CType(e.Row,KN_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KN_TEMP_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent KN_TEMP_TABLERowDeleting(Me, New KN_TEMP_TABLERowChangeEvent(CType(e.Row,KN_TEMP_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKN_TEMP_TABLERow(ByVal row As KN_TEMP_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KKL58DataSet = New KKL58DataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KN_TEMP_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KC_HOUR_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableKC_HOUR_TABLE As KC_HOUR_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKC_HOUR_TABLE = CType(Me.Table,KC_HOUR_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIMESTAMP() As Date
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.TIMESTAMPColumn),Date)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_PH() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.IN_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.IN_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_EC() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.IN_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.IN_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_TEMP() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.IN_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.IN_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_SS() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.IN_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.IN_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_COD() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.IN_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.IN_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_AMDI() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.IN_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.IN_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PH() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_EC() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_TEMP() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_SS() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_COD() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_AMDI() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_O2() As Double
            Get
                Return CType(Me(Me.tableKC_HOUR_TABLE.OUT_O2Column),Double)
            End Get
            Set
                Me(Me.tableKC_HOUR_TABLE.OUT_O2Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KC_TEMP_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableKC_TEMP_TABLE As KC_TEMP_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKC_TEMP_TABLE = CType(Me.Table,KC_TEMP_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_PH() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.IN_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.IN_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_EC() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.IN_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.IN_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_TEMP() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.IN_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.IN_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_SS() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.IN_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.IN_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_COD() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.IN_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.IN_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_AMDI() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.IN_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.IN_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PH() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_EC() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_TEMP() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_SS() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_COD() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_AMDI() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_O2() As Double
            Get
                Return CType(Me(Me.tableKC_TEMP_TABLE.OUT_O2Column),Double)
            End Get
            Set
                Me(Me.tableKC_TEMP_TABLE.OUT_O2Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KN_HOUR_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableKN_HOUR_TABLE As KN_HOUR_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKN_HOUR_TABLE = CType(Me.Table,KN_HOUR_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIMESTAMP() As Date
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.TIMESTAMPColumn),Date)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_PH() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.IN_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.IN_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_EC() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.IN_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.IN_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_TEMP() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.IN_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.IN_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_SS() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.IN_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.IN_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_COD() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.IN_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.IN_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_AMDI() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.IN_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.IN_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PH() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_EC() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_TEMP() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_SS() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_COD() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_AMDI() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_O2() As Double
            Get
                Return CType(Me(Me.tableKN_HOUR_TABLE.OUT_O2Column),Double)
            End Get
            Set
                Me(Me.tableKN_HOUR_TABLE.OUT_O2Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KN_TEMP_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableKN_TEMP_TABLE As KN_TEMP_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKN_TEMP_TABLE = CType(Me.Table,KN_TEMP_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_PH() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.IN_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.IN_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_EC() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.IN_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.IN_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_TEMP() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.IN_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.IN_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_SS() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.IN_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.IN_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_COD() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.IN_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.IN_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_AMDI() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.IN_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.IN_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PH() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_PHColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_EC() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_ECColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_ECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_TEMP() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_TEMPColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_SS() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_SSColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_SSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_COD() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_CODColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_AMDI() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_AMDIColumn),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_AMDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_O2() As Double
            Get
                Return CType(Me(Me.tableKN_TEMP_TABLE.OUT_O2Column),Double)
            End Get
            Set
                Me(Me.tableKN_TEMP_TABLE.OUT_O2Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KC_HOUR_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KC_HOUR_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KC_HOUR_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KC_HOUR_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KC_TEMP_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KC_TEMP_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KC_TEMP_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KC_TEMP_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KN_HOUR_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KN_HOUR_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KN_HOUR_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KN_HOUR_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KN_TEMP_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KN_TEMP_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KN_TEMP_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KN_TEMP_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace KKL58DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class KC_HOUR_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "KC_HOUR_TABLE"
            tableMapping.ColumnMappings.Add("TIMESTAMP", "TIMESTAMP")
            tableMapping.ColumnMappings.Add("IN_PH", "IN_PH")
            tableMapping.ColumnMappings.Add("IN_EC", "IN_EC")
            tableMapping.ColumnMappings.Add("IN_TEMP", "IN_TEMP")
            tableMapping.ColumnMappings.Add("IN_SS", "IN_SS")
            tableMapping.ColumnMappings.Add("IN_COD", "IN_COD")
            tableMapping.ColumnMappings.Add("IN_AMDI", "IN_AMDI")
            tableMapping.ColumnMappings.Add("OUT_PH", "OUT_PH")
            tableMapping.ColumnMappings.Add("OUT_EC", "OUT_EC")
            tableMapping.ColumnMappings.Add("OUT_TEMP", "OUT_TEMP")
            tableMapping.ColumnMappings.Add("OUT_SS", "OUT_SS")
            tableMapping.ColumnMappings.Add("OUT_COD", "OUT_COD")
            tableMapping.ColumnMappings.Add("OUT_AMDI", "OUT_AMDI")
            tableMapping.ColumnMappings.Add("OUT_O2", "OUT_O2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[KC_HOUR_TABLE] WHERE (([TIMESTAMP] = @Original_TIMESTAMP) AND "& _ 
                "([IN_PH] = @Original_IN_PH) AND ([IN_EC] = @Original_IN_EC) AND ([IN_TEMP] = @Or"& _ 
                "iginal_IN_TEMP) AND ([IN_SS] = @Original_IN_SS) AND ([IN_COD] = @Original_IN_COD"& _ 
                ") AND ([IN_AMDI] = @Original_IN_AMDI) AND ([OUT_PH] = @Original_OUT_PH) AND ([OU"& _ 
                "T_EC] = @Original_OUT_EC) AND ([OUT_TEMP] = @Original_OUT_TEMP) AND ([OUT_SS] = "& _ 
                "@Original_OUT_SS) AND ([OUT_COD] = @Original_OUT_COD) AND ([OUT_AMDI] = @Origina"& _ 
                "l_OUT_AMDI) AND ([OUT_O2] = @Original_OUT_O2))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[KC_HOUR_TABLE] ([TIMESTAMP], [IN_PH], [IN_EC], [IN_TEMP], [IN_"& _ 
                "SS], [IN_COD], [IN_AMDI], [OUT_PH], [OUT_EC], [OUT_TEMP], [OUT_SS], [OUT_COD], ["& _ 
                "OUT_AMDI], [OUT_O2]) VALUES (@TIMESTAMP, @IN_PH, @IN_EC, @IN_TEMP, @IN_SS, @IN_C"& _ 
                "OD, @IN_AMDI, @OUT_PH, @OUT_EC, @OUT_TEMP, @OUT_SS, @OUT_COD, @OUT_AMDI, @OUT_O2"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT"& _ 
                "_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2 FROM KC_HOUR_TABLE WHERE (TIMES"& _ 
                "TAMP = @TIMESTAMP)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[KC_HOUR_TABLE] SET [TIMESTAMP] = @TIMESTAMP, [IN_PH] = @IN_PH, [IN_"& _ 
                "EC] = @IN_EC, [IN_TEMP] = @IN_TEMP, [IN_SS] = @IN_SS, [IN_COD] = @IN_COD, [IN_AM"& _ 
                "DI] = @IN_AMDI, [OUT_PH] = @OUT_PH, [OUT_EC] = @OUT_EC, [OUT_TEMP] = @OUT_TEMP, "& _ 
                "[OUT_SS] = @OUT_SS, [OUT_COD] = @OUT_COD, [OUT_AMDI] = @OUT_AMDI, [OUT_O2] = @OU"& _ 
                "T_O2 WHERE (([TIMESTAMP] = @Original_TIMESTAMP) AND ([IN_PH] = @Original_IN_PH) "& _ 
                "AND ([IN_EC] = @Original_IN_EC) AND ([IN_TEMP] = @Original_IN_TEMP) AND ([IN_SS]"& _ 
                " = @Original_IN_SS) AND ([IN_COD] = @Original_IN_COD) AND ([IN_AMDI] = @Original"& _ 
                "_IN_AMDI) AND ([OUT_PH] = @Original_OUT_PH) AND ([OUT_EC] = @Original_OUT_EC) AN"& _ 
                "D ([OUT_TEMP] = @Original_OUT_TEMP) AND ([OUT_SS] = @Original_OUT_SS) AND ([OUT_"& _ 
                "COD] = @Original_OUT_COD) AND ([OUT_AMDI] = @Original_OUT_AMDI) AND ([OUT_O2] = "& _ 
                "@Original_OUT_O2));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_"& _ 
                "AMDI, OUT_PH, OUT_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2 FROM KC_HOUR_T"& _ 
                "ABLE WHERE (TIMESTAMP = @TIMESTAMP)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=WIN-2XY6OEXJZUZ\SQLEXPRESS;Initial Catalog=KKL58;User ID=sa"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, "& _ 
                "OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2 FROM dbo.KC_HOUR_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As KKL58DataSet.KC_HOUR_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As KKL58DataSet.KC_HOUR_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As KKL58DataSet.KC_HOUR_TABLEDataTable = New KKL58DataSet.KC_HOUR_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As KKL58DataSet.KC_HOUR_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As KKL58DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "KC_HOUR_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TIMESTAMP As Date, ByVal Original_IN_PH As Double, ByVal Original_IN_EC As Double, ByVal Original_IN_TEMP As Double, ByVal Original_IN_SS As Double, ByVal Original_IN_COD As Double, ByVal Original_IN_AMDI As Double, ByVal Original_OUT_PH As Double, ByVal Original_OUT_EC As Double, ByVal Original_OUT_TEMP As Double, ByVal Original_OUT_SS As Double, ByVal Original_OUT_COD As Double, ByVal Original_OUT_AMDI As Double, ByVal Original_OUT_O2 As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TIMESTAMP,Date)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IN_PH,Double)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IN_EC,Double)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IN_TEMP,Double)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IN_SS,Double)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_IN_COD,Double)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IN_AMDI,Double)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_OUT_PH,Double)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_OUT_EC,Double)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_OUT_TEMP,Double)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_OUT_SS,Double)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_OUT_COD,Double)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_OUT_AMDI,Double)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_OUT_O2,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TIMESTAMP As Date, ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TIMESTAMP,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IN_PH,Double)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IN_EC,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(IN_SS,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(IN_COD,Double)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(IN_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(OUT_PH,Double)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(OUT_EC,Double)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(OUT_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(OUT_SS,Double)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(OUT_COD,Double)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(OUT_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(OUT_O2,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TIMESTAMP As Date,  _
                    ByVal IN_PH As Double,  _
                    ByVal IN_EC As Double,  _
                    ByVal IN_TEMP As Double,  _
                    ByVal IN_SS As Double,  _
                    ByVal IN_COD As Double,  _
                    ByVal IN_AMDI As Double,  _
                    ByVal OUT_PH As Double,  _
                    ByVal OUT_EC As Double,  _
                    ByVal OUT_TEMP As Double,  _
                    ByVal OUT_SS As Double,  _
                    ByVal OUT_COD As Double,  _
                    ByVal OUT_AMDI As Double,  _
                    ByVal OUT_O2 As Double,  _
                    ByVal Original_TIMESTAMP As Date,  _
                    ByVal Original_IN_PH As Double,  _
                    ByVal Original_IN_EC As Double,  _
                    ByVal Original_IN_TEMP As Double,  _
                    ByVal Original_IN_SS As Double,  _
                    ByVal Original_IN_COD As Double,  _
                    ByVal Original_IN_AMDI As Double,  _
                    ByVal Original_OUT_PH As Double,  _
                    ByVal Original_OUT_EC As Double,  _
                    ByVal Original_OUT_TEMP As Double,  _
                    ByVal Original_OUT_SS As Double,  _
                    ByVal Original_OUT_COD As Double,  _
                    ByVal Original_OUT_AMDI As Double,  _
                    ByVal Original_OUT_O2 As Double) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TIMESTAMP,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IN_PH,Double)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IN_EC,Double)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IN_TEMP,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IN_SS,Double)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IN_COD,Double)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IN_AMDI,Double)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(OUT_PH,Double)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OUT_EC,Double)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(OUT_TEMP,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(OUT_SS,Double)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(OUT_COD,Double)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(OUT_AMDI,Double)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(OUT_O2,Double)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_TIMESTAMP,Date)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_IN_PH,Double)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_IN_EC,Double)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_IN_TEMP,Double)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_IN_SS,Double)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_IN_COD,Double)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_IN_AMDI,Double)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_OUT_PH,Double)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_OUT_EC,Double)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_OUT_TEMP,Double)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_OUT_SS,Double)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_OUT_COD,Double)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_OUT_AMDI,Double)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_OUT_O2,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IN_PH As Double,  _
                    ByVal IN_EC As Double,  _
                    ByVal IN_TEMP As Double,  _
                    ByVal IN_SS As Double,  _
                    ByVal IN_COD As Double,  _
                    ByVal IN_AMDI As Double,  _
                    ByVal OUT_PH As Double,  _
                    ByVal OUT_EC As Double,  _
                    ByVal OUT_TEMP As Double,  _
                    ByVal OUT_SS As Double,  _
                    ByVal OUT_COD As Double,  _
                    ByVal OUT_AMDI As Double,  _
                    ByVal OUT_O2 As Double,  _
                    ByVal Original_TIMESTAMP As Date,  _
                    ByVal Original_IN_PH As Double,  _
                    ByVal Original_IN_EC As Double,  _
                    ByVal Original_IN_TEMP As Double,  _
                    ByVal Original_IN_SS As Double,  _
                    ByVal Original_IN_COD As Double,  _
                    ByVal Original_IN_AMDI As Double,  _
                    ByVal Original_OUT_PH As Double,  _
                    ByVal Original_OUT_EC As Double,  _
                    ByVal Original_OUT_TEMP As Double,  _
                    ByVal Original_OUT_SS As Double,  _
                    ByVal Original_OUT_COD As Double,  _
                    ByVal Original_OUT_AMDI As Double,  _
                    ByVal Original_OUT_O2 As Double) As Integer
            Return Me.Update(Original_TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2, Original_TIMESTAMP, Original_IN_PH, Original_IN_EC, Original_IN_TEMP, Original_IN_SS, Original_IN_COD, Original_IN_AMDI, Original_OUT_PH, Original_OUT_EC, Original_OUT_TEMP, Original_OUT_SS, Original_OUT_COD, Original_OUT_AMDI, Original_OUT_O2)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class KC_TEMP_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "KC_TEMP_TABLE"
            tableMapping.ColumnMappings.Add("IN_PH", "IN_PH")
            tableMapping.ColumnMappings.Add("IN_EC", "IN_EC")
            tableMapping.ColumnMappings.Add("IN_TEMP", "IN_TEMP")
            tableMapping.ColumnMappings.Add("IN_SS", "IN_SS")
            tableMapping.ColumnMappings.Add("IN_COD", "IN_COD")
            tableMapping.ColumnMappings.Add("IN_AMDI", "IN_AMDI")
            tableMapping.ColumnMappings.Add("OUT_PH", "OUT_PH")
            tableMapping.ColumnMappings.Add("OUT_EC", "OUT_EC")
            tableMapping.ColumnMappings.Add("OUT_TEMP", "OUT_TEMP")
            tableMapping.ColumnMappings.Add("OUT_SS", "OUT_SS")
            tableMapping.ColumnMappings.Add("OUT_COD", "OUT_COD")
            tableMapping.ColumnMappings.Add("OUT_AMDI", "OUT_AMDI")
            tableMapping.ColumnMappings.Add("OUT_O2", "OUT_O2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[KC_TEMP_TABLE] ([IN_PH], [IN_EC], [IN_TEMP], [IN_SS], [IN_COD]"& _ 
                ", [IN_AMDI], [OUT_PH], [OUT_EC], [OUT_TEMP], [OUT_SS], [OUT_COD], [OUT_AMDI], [O"& _ 
                "UT_O2]) VALUES (@IN_PH, @IN_EC, @IN_TEMP, @IN_SS, @IN_COD, @IN_AMDI, @OUT_PH, @O"& _ 
                "UT_EC, @OUT_TEMP, @OUT_SS, @OUT_COD, @OUT_AMDI, @OUT_O2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=WIN-2XY6OEXJZUZ\SQLEXPRESS;Initial Catalog=KKL58;User ID=sa"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, O"& _ 
                "UT_SS, OUT_COD, OUT_AMDI, OUT_O2 FROM dbo.KC_TEMP_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As KKL58DataSet.KC_TEMP_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As KKL58DataSet.KC_TEMP_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As KKL58DataSet.KC_TEMP_TABLEDataTable = New KKL58DataSet.KC_TEMP_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As KKL58DataSet.KC_TEMP_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As KKL58DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "KC_TEMP_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IN_PH,Double)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IN_EC,Double)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IN_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_SS,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(IN_COD,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(IN_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(OUT_PH,Double)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(OUT_EC,Double)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(OUT_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(OUT_SS,Double)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(OUT_COD,Double)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(OUT_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(OUT_O2,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class KN_HOUR_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "KN_HOUR_TABLE"
            tableMapping.ColumnMappings.Add("TIMESTAMP", "TIMESTAMP")
            tableMapping.ColumnMappings.Add("IN_PH", "IN_PH")
            tableMapping.ColumnMappings.Add("IN_EC", "IN_EC")
            tableMapping.ColumnMappings.Add("IN_TEMP", "IN_TEMP")
            tableMapping.ColumnMappings.Add("IN_SS", "IN_SS")
            tableMapping.ColumnMappings.Add("IN_COD", "IN_COD")
            tableMapping.ColumnMappings.Add("IN_AMDI", "IN_AMDI")
            tableMapping.ColumnMappings.Add("OUT_PH", "OUT_PH")
            tableMapping.ColumnMappings.Add("OUT_EC", "OUT_EC")
            tableMapping.ColumnMappings.Add("OUT_TEMP", "OUT_TEMP")
            tableMapping.ColumnMappings.Add("OUT_SS", "OUT_SS")
            tableMapping.ColumnMappings.Add("OUT_COD", "OUT_COD")
            tableMapping.ColumnMappings.Add("OUT_AMDI", "OUT_AMDI")
            tableMapping.ColumnMappings.Add("OUT_O2", "OUT_O2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[KN_HOUR_TABLE] ([TIMESTAMP], [IN_PH], [IN_EC], [IN_TEMP], [IN_"& _ 
                "SS], [IN_COD], [IN_AMDI], [OUT_PH], [OUT_EC], [OUT_TEMP], [OUT_SS], [OUT_COD], ["& _ 
                "OUT_AMDI], [OUT_O2]) VALUES (@TIMESTAMP, @IN_PH, @IN_EC, @IN_TEMP, @IN_SS, @IN_C"& _ 
                "OD, @IN_AMDI, @OUT_PH, @OUT_EC, @OUT_TEMP, @OUT_SS, @OUT_COD, @OUT_AMDI, @OUT_O2"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=WIN-2XY6OEXJZUZ\SQLEXPRESS;Initial Catalog=KKL58;User ID=sa"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TIMESTAMP, IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, "& _ 
                "OUT_TEMP, OUT_SS, OUT_COD, OUT_AMDI, OUT_O2 FROM dbo.KN_HOUR_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As KKL58DataSet.KN_HOUR_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As KKL58DataSet.KN_HOUR_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As KKL58DataSet.KN_HOUR_TABLEDataTable = New KKL58DataSet.KN_HOUR_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As KKL58DataSet.KN_HOUR_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As KKL58DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "KN_HOUR_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TIMESTAMP As Date, ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TIMESTAMP,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IN_PH,Double)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IN_EC,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(IN_SS,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(IN_COD,Double)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(IN_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(OUT_PH,Double)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(OUT_EC,Double)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(OUT_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(OUT_SS,Double)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(OUT_COD,Double)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(OUT_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(OUT_O2,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class KN_TEMP_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "KN_TEMP_TABLE"
            tableMapping.ColumnMappings.Add("IN_PH", "IN_PH")
            tableMapping.ColumnMappings.Add("IN_EC", "IN_EC")
            tableMapping.ColumnMappings.Add("IN_TEMP", "IN_TEMP")
            tableMapping.ColumnMappings.Add("IN_SS", "IN_SS")
            tableMapping.ColumnMappings.Add("IN_COD", "IN_COD")
            tableMapping.ColumnMappings.Add("IN_AMDI", "IN_AMDI")
            tableMapping.ColumnMappings.Add("OUT_PH", "OUT_PH")
            tableMapping.ColumnMappings.Add("OUT_EC", "OUT_EC")
            tableMapping.ColumnMappings.Add("OUT_TEMP", "OUT_TEMP")
            tableMapping.ColumnMappings.Add("OUT_SS", "OUT_SS")
            tableMapping.ColumnMappings.Add("OUT_COD", "OUT_COD")
            tableMapping.ColumnMappings.Add("OUT_AMDI", "OUT_AMDI")
            tableMapping.ColumnMappings.Add("OUT_O2", "OUT_O2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[KN_TEMP_TABLE] ([IN_PH], [IN_EC], [IN_TEMP], [IN_SS], [IN_COD]"& _ 
                ", [IN_AMDI], [OUT_PH], [OUT_EC], [OUT_TEMP], [OUT_SS], [OUT_COD], [OUT_AMDI], [O"& _ 
                "UT_O2]) VALUES (@IN_PH, @IN_EC, @IN_TEMP, @IN_SS, @IN_COD, @IN_AMDI, @OUT_PH, @O"& _ 
                "UT_EC, @OUT_TEMP, @OUT_SS, @OUT_COD, @OUT_AMDI, @OUT_O2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_EC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_EC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_TEMP", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_TEMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_SS", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_SS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_COD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_COD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_AMDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_AMDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_O2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_O2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=WIN-2XY6OEXJZUZ\SQLEXPRESS;Initial Catalog=KKL58;User ID=sa"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IN_PH, IN_EC, IN_TEMP, IN_SS, IN_COD, IN_AMDI, OUT_PH, OUT_EC, OUT_TEMP, O"& _ 
                "UT_SS, OUT_COD, OUT_AMDI, OUT_O2 FROM dbo.KN_TEMP_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As KKL58DataSet.KN_TEMP_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As KKL58DataSet.KN_TEMP_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As KKL58DataSet.KN_TEMP_TABLEDataTable = New KKL58DataSet.KN_TEMP_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As KKL58DataSet.KN_TEMP_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As KKL58DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "KN_TEMP_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IN_PH As Double, ByVal IN_EC As Double, ByVal IN_TEMP As Double, ByVal IN_SS As Double, ByVal IN_COD As Double, ByVal IN_AMDI As Double, ByVal OUT_PH As Double, ByVal OUT_EC As Double, ByVal OUT_TEMP As Double, ByVal OUT_SS As Double, ByVal OUT_COD As Double, ByVal OUT_AMDI As Double, ByVal OUT_O2 As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IN_PH,Double)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IN_EC,Double)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IN_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_SS,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(IN_COD,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(IN_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(OUT_PH,Double)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(OUT_EC,Double)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(OUT_TEMP,Double)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(OUT_SS,Double)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(OUT_COD,Double)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(OUT_AMDI,Double)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(OUT_O2,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _kC_HOUR_TABLETableAdapter As KC_HOUR_TABLETableAdapter
        
        Private _kC_TEMP_TABLETableAdapter As KC_TEMP_TABLETableAdapter
        
        Private _kN_HOUR_TABLETableAdapter As KN_HOUR_TABLETableAdapter
        
        Private _kN_TEMP_TABLETableAdapter As KN_TEMP_TABLETableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property KC_HOUR_TABLETableAdapter() As KC_HOUR_TABLETableAdapter
            Get
                Return Me._kC_HOUR_TABLETableAdapter
            End Get
            Set
                Me._kC_HOUR_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property KC_TEMP_TABLETableAdapter() As KC_TEMP_TABLETableAdapter
            Get
                Return Me._kC_TEMP_TABLETableAdapter
            End Get
            Set
                Me._kC_TEMP_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property KN_HOUR_TABLETableAdapter() As KN_HOUR_TABLETableAdapter
            Get
                Return Me._kN_HOUR_TABLETableAdapter
            End Get
            Set
                Me._kN_HOUR_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property KN_TEMP_TABLETableAdapter() As KN_TEMP_TABLETableAdapter
            Get
                Return Me._kN_TEMP_TABLETableAdapter
            End Get
            Set
                Me._kN_TEMP_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._kC_HOUR_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._kC_HOUR_TABLETableAdapter.Connection
                End If
                If ((Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._kC_TEMP_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._kC_TEMP_TABLETableAdapter.Connection
                End If
                If ((Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._kN_HOUR_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._kN_HOUR_TABLETableAdapter.Connection
                End If
                If ((Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._kN_TEMP_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._kN_TEMP_TABLETableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As KKL58DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.KN_HOUR_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._kN_HOUR_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.KN_TEMP_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._kN_TEMP_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.KC_HOUR_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._kC_HOUR_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.KC_TEMP_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._kC_TEMP_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As KKL58DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.KN_HOUR_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._kN_HOUR_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.KN_TEMP_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._kN_TEMP_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.KC_HOUR_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._kC_HOUR_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.KC_TEMP_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._kC_TEMP_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As KKL58DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.KC_TEMP_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._kC_TEMP_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.KC_HOUR_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._kC_HOUR_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.KN_TEMP_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._kN_TEMP_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.KN_HOUR_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._kN_HOUR_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As KKL58DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._kC_HOUR_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。")
            End If
            If ((Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._kC_TEMP_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。")
            End If
            If ((Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._kN_HOUR_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。")
            End If
            If ((Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._kN_TEMP_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager 未包含連接資訊。請將每個 TableAdapterManager 的 TableAdapter 屬性設成有效的 Table"& _ 
                        "Adapter 執行個體。")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("無法開始交易。目前的資料連接不支援交易或是目前的狀態不允許交易開始。")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._kC_HOUR_TABLETableAdapter, Me._kC_HOUR_TABLETableAdapter.Connection)
                    Me._kC_HOUR_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._kC_HOUR_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._kC_HOUR_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._kC_HOUR_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._kC_HOUR_TABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._kC_TEMP_TABLETableAdapter, Me._kC_TEMP_TABLETableAdapter.Connection)
                    Me._kC_TEMP_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._kC_TEMP_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._kC_TEMP_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._kC_TEMP_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._kC_TEMP_TABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._kN_HOUR_TABLETableAdapter, Me._kN_HOUR_TABLETableAdapter.Connection)
                    Me._kN_HOUR_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._kN_HOUR_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._kN_HOUR_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._kN_HOUR_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._kN_HOUR_TABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._kN_TEMP_TABLETableAdapter, Me._kN_TEMP_TABLETableAdapter.Connection)
                    Me._kN_TEMP_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._kN_TEMP_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._kN_TEMP_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._kN_TEMP_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._kN_TEMP_TABLETableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._kC_HOUR_TABLETableAdapter) Is Nothing) Then
                    Me._kC_HOUR_TABLETableAdapter.Connection = CType(revertConnections(Me._kC_HOUR_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._kC_HOUR_TABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._kC_TEMP_TABLETableAdapter) Is Nothing) Then
                    Me._kC_TEMP_TABLETableAdapter.Connection = CType(revertConnections(Me._kC_TEMP_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._kC_TEMP_TABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._kN_HOUR_TABLETableAdapter) Is Nothing) Then
                    Me._kN_HOUR_TABLETableAdapter.Connection = CType(revertConnections(Me._kN_HOUR_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._kN_HOUR_TABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._kN_TEMP_TABLETableAdapter) Is Nothing) Then
                    Me._kN_TEMP_TABLETableAdapter.Connection = CType(revertConnections(Me._kN_TEMP_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._kN_TEMP_TABLETableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
